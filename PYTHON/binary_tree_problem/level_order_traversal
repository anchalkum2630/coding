# # Python program to print level
# # order traversal using Queue


# # A node structure
# class Node:

# 	# A utility function to create a new node
# 	def __init__(self, key):
# 		self.data = key
# 		self.left = None
# 		self.right = None


# # Iterative Method to print the
# # height of a binary tree
# def printLevelOrder(root):

# 	# Base Case
# 	if root is None:
# 		return

# 	# Create an empty queue
# 	# for level order traversal
# 	queue = []

# 	# Enqueue Root and initialize height
# 	queue.append(root)

# 	while(len(queue) > 0):

# 		# Print front of queue and
# 		# remove it from queue
# 		print(queue[0].data, end=" ")
# 		node = queue.pop(0)

# 		# Enqueue left child
# 		if node.left is not None:
# 			queue.append(node.left)

# 		# Enqueue right child
# 		if node.right is not None:
# 			queue.append(node.right)


# # Driver Program to test above function
# if __name__ == '__main__':
# 	root = Node(1)
# 	root.left = Node(2)
# 	root.right = Node(3)
# 	root.left.left = Node(4)
# 	root.left.right = Node(5)
# 	root.right.left = Node(6)
# 	root.right.right = Node(7)

# 	print("Level Order Traversal of binary tree is -")
# 	printLevelOrder(root)


# # This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# harastuti code
class bt:
    def __init__(self,val):
        self.left=None
        self.right=None
        self.data=val
        
def insert(root):
    print("Enter left child value for", root.data)
    left_val = int(input())
    if left_val != -1:
        root.left = bt(left_val)
        insert(root.left)
    
    print("Enter right child value for", root.data)
    right_val = int(input())
    if right_val != -1:
        root.right = bt(right_val)
        insert(root.right)
    return root
    
def solve(root):
    res=[]
    x=leftview(root,res)
    return x

def leftview(root,res):
    if root is None:
        return 0
    if root.left is None and root.right is None:
        return res
    
    res.append(root.data)
    leftview(root.left,res)
    leftview(root.right,res)
    
def inorder(b):
    if b is None:
        return 
    
    inorder(b.left)
    print(b.data,end=" ")
    inorder(b.right)   
        
def preorder(b):
    if b is None:
        return 
    
    print(b.data,end=" ")
    preorder(b.left)
    preorder(b.right)   
    
def postorder(b):
    if b is None:
        return 
    
    postorder(b.left)
    postorder(b.right)  
    print(b.data,end=" ") 
    
def i_postorder(root):
    # postorder=[]
        
    stack1=[]
    stack2=[]
    if root is None:
        return
    stack1.append(root)
    while stack1 is not None:
        root=stack1.pop()
        stack1.pop()
        stack2.append(root)
        if root.left!=None:
            stack1.append(root.left)

        if root.right is not None:
            stack1.append(root.right)
    
    return stack2

def levelorder(root):
    ans=[]
    q=[]
    if root is None:
        return ans
    
    q.append(root)
    while q:
        level=[]
        size=len(q)
        for i in range(0,size):
            node=q[0]
            q.remove(node)
            
            if node.left is not None:
                q.append(node.left)
            
            if node.right is not None:
                q.append(node.right)
                
            level.append(node.data)
        ans.append(level)
    
    print(ans)

root = bt(1)
root.left = bt(2)
root.right = bt(3)
root.left.left = bt(4)
root.left.right = bt(5)
root.right.left = bt(6)
root.right.right = bt(7)
levelorder(root)
# b.left=bt(2)
# b.right=bt(12)
# b.left.left=bt(20)
# b.left.right=bt(13)
# print(" inorder traversal ")
# inorder(root)
# print("\n POSTORDER TRAVERSAL ")
# postorder(root)
# print("\n PREORDER TRAVERSAL ")
# preorder(root)
# r=i_postorder(root)
# print(r)

# print(l)
# print(solve(root))